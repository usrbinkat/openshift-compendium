{"componentChunkName":"component---node-modules-gatsby-theme-code-notes-src-templates-note-js","path":"/ocp4-admintasks/switch-cluster-version/","result":{"data":{"mdx":{"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", {\n    \"id\": \"switch-clusterversion-channel\"\n  }, \"Switch clusterversion channel\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"oc patch \\\\\\n   --patch='{\\\"spec\\\": {\\\"channel\\\": \\\"prerelease-4.1\\\"}}' \\\\\\n   --type=merge \\\\\\n   clusterversion/version\\n\")), mdx(\"h1\", {\n    \"id\": \"unmanage-operators\"\n  }, \"Unmanage operators\"), mdx(\"p\", null, \"(via \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/openshift/cluster-version-operator/blob/master/docs/dev/clusterversion.md#setting-objects-unmanaged\"\n  }), \"github.com/openshif...rsion.md\"), \")\"), mdx(\"p\", null, \"For testing purposes the CVO can unmanage some operators, so you can alter\\nobjects without the CVO stomping on your changes by overriding the specific\\noperator spec in the clusterversion object.\"), mdx(\"p\", null, \"To get a list of current overrides:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"oc get -o json clusterversion version | jq .spec.overrides\\n\")), mdx(\"p\", null, \"To add an entry to that list, you can use a JSON Patch to add a \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://godoc.org/github.com/openshift/api/config/v1#ComponentOverride\"\n  }), \"ComponentOverride\"), \". For example, to set the network operator's deployment unmanaged:\"), mdx(\"h2\", {\n    \"id\": \"get-the-operator-deployment-information\"\n  }, \"Get the operator deployment information\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"oc/#extract-the-openshift-payloads-aka-files-assets-etc\"\n  }), \"Extract the OpenShift payloads\"), \".\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Observe the operator definition (api group, kind, name, namespace):\"))), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"head -n5 /tmp/mystuff/0000_07_cluster-network-operator_03_daemonset.yaml\\n\")), mdx(\"p\", null, \"In this case:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"apiVersion: apps/v1\\nkind: Deployment\\nmetadata:\\n  name: network-operator\\n  namespace: openshift-network-operator\\n\")), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Note:\"), \" In this case, even if the file uses \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"daemonset\"), \", it is in a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"deployment\"), \" instead.\"), mdx(\"h2\", {\n    \"id\": \"create-the-patch-yaml-file\"\n  }, \"Create the patch yaml file\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"If there are currently no other overrides configured:\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-yaml\"\n  }), \"cat <<EOF >version-patch.yaml\\n- op: add\\n  path: /spec/overrides\\n  value:\\n  - kind: Deployment\\n    group: apps\\n    name: network-operator\\n    namespace: openshift-network-operator\\n    unmanaged: true\\nEOF\\n\")), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"To add to list of already existing overrides:\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-yaml\"\n  }), \"cat <<EOF >version-patch.yaml\\n- op: add\\n  path: /spec/overrides/-\\n  value:\\n  - kind: Deployment\\n    group: apps\\n    name: network-operator\\n    namespace: openshift-network-operator\\n    unmanaged: true\\nEOF\\n\")), mdx(\"p\", null, \"Observe the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"path\"), \" differences if there are overrides already.\"), mdx(\"h2\", {\n    \"id\": \"patch-the-clusterversion-object\"\n  }, \"Patch the clusterversion object\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"oc patch clusterversion version --type json -p \\\"$(cat version-patch.yaml)\\\"\\n\")), mdx(\"p\", null, \"You can verify the update with:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"oc get -o json clusterversion version | jq .spec.overrides\\n\")), mdx(\"p\", null, \"Output:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"[\\n  {\\n    \\\"group\\\": \\\"apps\\\",\\n    \\\"kind\\\": \\\"Deployment\\\",\\n    \\\"name\\\": \\\"cluster-network-operator\\\",\\n    \\\"namespace\\\": \\\"openshift-network-operator\\\",\\n    \\\"unmanaged\\\": true\\n  }\\n]\\n\")), mdx(\"p\", null, \"After updating the ClusterVersion, you can make your desired edits to the unmanaged object.\"), mdx(\"h1\", {\n    \"id\": \"disabling-the-cluster-version-operator\"\n  }, \"Disabling the cluster-version operator\"), mdx(\"p\", null, \"(via \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/openshift/cluster-version-operator/blob/master/docs/dev/clusterversion.md#disabling-the-cluster-version-operator\"\n  }), \"github.com/openshif...rsion.md\"), \")\"), mdx(\"p\", null, \"When you just want to turn off the cluster-version operator instead of fiddling with per-object overrides, you can:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"oc scale --replicas 0 -n openshift-cluster-version deployments/cluster-version-operator\\n\\nexport const _frontmatter = {\\\"title\\\":\\\"Switch cluster version via update channels\\\",\\\"tags\\\":[\\\"Openshift 4\\\",\\\"Admin Tasks\\\",\\\"Upgrade\\\"],\\\"emoji\\\":\\\"\\uD83E\\uDDF0\\\",\\\"link\\\":\\\"https://github.com/openshift/cluster-version-operator/blob/master/docs/dev/clusterversion.md#setting-objects-unmanaged\\\"}\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;","frontmatter":{"title":"Switch cluster version via update channels","tags":["Openshift 4","Admin Tasks","Upgrade"],"emoji":"ðŸ§°","link":"https://github.com/openshift/cluster-version-operator/blob/master/docs/dev/clusterversion.md#setting-objects-unmanaged"},"fields":{"slug":"/ocp4-admintasks/switch-cluster-version/"},"tableOfContents":{"items":[{"url":"#switch-clusterversion-channel","title":"Switch clusterversion channel"},{"url":"#unmanage-operators","title":"Unmanage operators","items":[{"url":"#get-the-operator-deployment-information","title":"Get the operator deployment information"},{"url":"#create-the-patch-yaml-file","title":"Create the patch yaml file"},{"url":"#patch-the-clusterversion-object","title":"Patch the clusterversion object"}]},{"url":"#disabling-the-cluster-version-operator","title":"Disabling the cluster-version operator"}]},"parent":{"__typename":"File","relativePath":"ocp4-admintasks/switch-cluster-version.md"}}},"pageContext":{"id":"5c37b373-b853-5a50-940e-8ee14b2013ad","previous":{"id":"557ea375-e03f-5871-a193-775bb66b50e1","frontmatter":{"title":"Creating a Custom ISO for Bare Metal Installations","tags":["Openshift 4","Installation"]},"fields":{"slug":"/ocp4-installation/custom-bare-metal-iso/"}},"next":{"id":"d1e363f6-f40b-5dbd-b21f-60026fd30f5f","frontmatter":{"title":"Secret management tips","tags":["Openshift 4","Admin Tasks","Secrets"]},"fields":{"slug":"/ocp4-admintasks/secret-management/"}},"hasUntagged":false,"basePath":"/"}},"staticQueryHashes":["1437003973","2744905544","3664657028","467212769","467212769"]}