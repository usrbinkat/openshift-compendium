{"componentChunkName":"component---node-modules-gatsby-theme-code-notes-src-templates-note-js","path":"/imagemanagement/get-tags-of-remote-image/","result":{"data":{"mdx":{"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Get tags of remote images\",\n  \"tags\": [\"Openshift 4\", \"Images\"],\n  \"emoji\": \"üè∑Ô∏è\",\n  \"link\": \"https://docs.openshift.com/container-platform/4.5/openshift_images/managing_images/tagging-images.html\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h3\", {\n    \"id\": \"get-tags-from-a-particular-image-in-a-particular-container-image-registry\"\n  }, \"Get tags from a particular image in a particular container image registry\"), mdx(\"p\", null, \"In order to get images from Red Hat's registries, it is required to have a\\npull secret that contains base64 encoded tokens to reach those registries, such\\nas:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"'{\\n   \\\"auths\\\":{\\n      \\\"quay.io\\\":{\\n         \\\"auth\\\":\\\"xxx\\\",\\n         \\\"email\\\":\\\"xxx\\\"\\n      },\\n      \\\"registry.redhat.io\\\":{\\n         \\\"auth\\\":\\\"xxx\\\",\\n         \\\"email\\\":\\\"xxx\\\"\\n      },\\n      \\\"registry.example.com\\\":{\\n         \\\"auth\\\":\\\"xxx\\\",\\n         \\\"email\\\":\\\"xxx\\\"\\n      },\\n   }\\n}'\\n\")), mdx(\"p\", null, \"First step is to get the token. We do this with this handy one liner:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"REGISTRY=registry.example.com\\necho $PULL_SECRET | jq -r \\\".auths.\\\\\\\"${REGISTRY}\\\\\\\".auth\\\" | base64 -d | cut -d: -f2\\n\")), mdx(\"p\", null, \"Or, store it in an environment variable:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"TOKEN=$(echo $PULL_SECRET | jq -r \\\".auths.\\\\\\\"${REGISTRY}\\\\\\\".auth\\\" | base64 -d | cut -d: -f2)\\n\")), mdx(\"p\", null, \"Then we can use regular container image registry API queries:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"curl -s -H  \\\"Authorization: Bearer ${TOKEN}\\\" https://${REGISTRY}/v2/_catalog\\n\")), mdx(\"p\", null, \"So, one liner to get the list of available tags for a particular image:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"curl -s -H  \\\"Authorization: Bearer $(echo $PULL_SECRET | jq -r '.auths.\\\"registry.example.com\\\".auth' | base64 -d | cut -d: -f2)\\\" https://registry.example.com/v2/eminguez/myawesomecontainer/tags/list | jq -r '.tags | .[]' | sort\\n\")), mdx(\"h3\", {\n    \"id\": \"get-tags-from-a-particular-image-in-quayio-registry\"\n  }, \"Get tags from a particular image in quay.io registry\"), mdx(\"p\", null, \"If the images are public (like openshift/origin-installer), it is as simple as:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"curl -X GET \\\"https://quay.io/api/v1/repository/openshift/origin-installer/tag/\\\" | jq -r .tags[].name | sort | uniq\\n\")), mdx(\"p\", null, \"Please note that \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://docs.quay.io/api/swagger/\"\n  }), \"quay.io API\"), \" is slightly different.\"));\n}\n;\nMDXContent.isMDXComponent = true;","frontmatter":{"title":"Get tags of remote images","tags":["Openshift 4","Images"],"emoji":"üè∑Ô∏è","link":"https://docs.openshift.com/container-platform/4.5/openshift_images/managing_images/tagging-images.html"},"fields":{"slug":"/imagemanagement/get-tags-of-remote-image/"},"tableOfContents":{"items":[{"url":"#get-tags-from-a-particular-image-in-a-particular-container-image-registry","title":"Get tags from a particular image in a particular container image registry"},{"url":"#get-tags-from-a-particular-image-in-quayio-registry","title":"Get tags from a particular image in quay.io registry"}]},"parent":{"__typename":"File","relativePath":"imagemanagement/get-tags-of-remote-image.md"}}},"pageContext":{"id":"5f47037b-adc3-520d-b910-1c23338e8c3f","previous":{"id":"afc1993d-bde4-5dd3-b0f2-056093f8ba6f","frontmatter":{"title":"Patch image pull policy","tags":["Openshift 4","Images"]},"fields":{"slug":"/imagemanagement/patch-image-pull-policy/"}},"next":{"id":"f6964558-8148-5c85-8618-2105e18d2af5","frontmatter":{"title":"Get raw disk usage of all images per namespace","tags":["Openshift 4","Images","Admin Tasks"]},"fields":{"slug":"/imagemanagement/get-raw-disk-usage-of-images/"}},"hasUntagged":false,"basePath":"/"}},"staticQueryHashes":["1437003973","2744905544","3664657028","467212769","467212769"]}